elastic_robot_2dof:
  joint_names: 
  - "joint_motor_1"
  - "joint_link_1"
  - "joint_motor_2"
  - "joint_link_2"

  base_link: "base"
  tool_link: "link2"
  
  gravity: [0, 0, -9.806]

  joint_motor_1:
    motor:
      type: "Ideal"
    friction:
      type: "Polynomial1"
      coefficients: [0, 0, 1.0e-6, 100]

  joint_motor_2:
    motor:
      type: "Ideal"
    friction:
      type: "Polynomial1"
      coefficients: [0, 0, 1.0e-6, 100]
    
  joint_link_1:
    spring:
      type: "Ideal"
      coefficients: [0,0.00145]
    friction:
      type: "Polynomial1"
      coefficients: [0, 0, 1.0e-6, 100]

  joint_link_2:
    spring:
      type: "Ideal"
      coefficients: [0,0.0024]
    friction:
      type: "Polynomial1"
      coefficients: [0, 0, 1.0e-6, 100]

#  log_file: "/home/maxwell/projects/fourbythree_ws/data/identification/test_JointState__fb_joint_states.bin"
  log_file: "/home/maxwell/projects/fourbythree_ws/data/identification/test_deflection_control_JointState__fb_joint_states.bin"

  number_of_joint: 4
  used_joints: [0, 2, 4, 6]

  position_filter:
    A:
    - [9.92014087e-01, 1.00000000e+00 ]
    - [-3.54290816e-05, 9.92014087e-01 ]
    B:
    - [0.00000000e+00 ]
    - [1.85256833e-02 ]
    Baw:
    - [0.00000000e+00 ]
    - [0.00000000e+00 ]
    C:
    - [5.31221205e-03, 5.33355614e-03 ]
    D:
    - [2.48009722e-05 ]
    max_output:
    - [1.00000000e+06 ]
    min_output:
    - [-1.00000000e+06 ]
    initial_state:
    - [0.00000000e+00 ]
    - [0.00000000e+00 ]
  effort_filter:
    A:
    - [9.92014087e-01, 1.00000000e+00 ]
    - [-3.54290816e-05, 9.92014087e-01 ]
    B:
    - [0.00000000e+00 ]
    - [1.85256833e-02 ]
    Baw:
    - [0.00000000e+00 ]
    - [0.00000000e+00 ]
    C:
    - [5.31221205e-03, 5.33355614e-03 ]
    D:
    - [2.48009722e-05 ]
    max_output:
    - [1.00000000e+06 ]
    min_output:
    - [-1.00000000e+06 ]
    initial_state:
    - [0.00000000e+00 ]
    - [0.00000000e+00 ]
  velocity_filter:
    A:
    - [0.00000000e+00, 1.67338830e+00, 1.68011185e+00 ]
    - [0.00000000e+00, 9.92014087e-01, 1.00000000e+00 ]
    - [0.00000000e+00, -3.54290816e-05, 9.92014087e-01 ]
    B:
    - [2.50000000e-01 ]
    - [0.00000000e+00 ]
    - [5.92821866e-01 ]
    Baw:
    - [0.00000000e+00 ]
    - [0.00000000e+00 ]
    - [0.00000000e+00 ]
    C:
    - [-9.92038888e-02, 1.66006627e-01, 1.66673629e-01 ]
    D:
    - [2.48009722e-02 ]
    max_output:
    - [1.00000000e+06 ]
    min_output:
    - [-1.00000000e+06 ]
    initial_state:
    - [0.00000000e+00 ]
    - [0.00000000e+00 ]
    - [0.00000000e+00 ]
  acceleration_filter:
    A:
    - [0.00000000e+00, -1.00000000e+00, 1.67338830e+00, 1.68011185e+00 ]
    - [0.00000000e+00, 0.00000000e+00, 1.67338830e+00, 1.68011185e+00 ]
    - [0.00000000e+00, 0.00000000e+00, 9.92014087e-01, 1.00000000e+00 ]
    - [0.00000000e+00, 0.00000000e+00, -3.54290816e-05, 9.92014087e-01 ]
    B:
    - [4.00000000e+00 ]
    - [4.00000000e+00 ]
    - [0.00000000e+00 ]
    - [9.48514985e+00 ]
    Baw:
    - [0.00000000e+00 ]
    - [0.00000000e+00 ]
    - [0.00000000e+00 ]
    - [0.00000000e+00 ]
    C:
    - [-6.20024305e+00, -6.20024305e+00, 1.03754142e+01, 1.04171018e+01 ]
    D:
    - [2.48009722e+01 ]
    max_output:
    - [1.00000000e+06 ]
    min_output:
    - [-1.00000000e+06 ]
    initial_state:
    - [0.00000000e+00 ]
    - [0.00000000e+00 ]
    - [0.00000000e+00 ]
    - [0.00000000e+00 ]

# Spring, Ideal: tau(q) = K*q
# coefficients = [K]
# 
# Polynomial2: tau(w)= c0*sign(w)+c1*w+c2*w^2*sign(w)
#              sign(w)=  1            if w > +wthreshold
#              sign(w)= -1            if w < -wthreshold
#              sign(w)= w/wthreshold  otherwise
#              w rounded in [-wmax,wmax]
#
#              coefficients = [c0,c1,c2,wthreshold,wmax]
