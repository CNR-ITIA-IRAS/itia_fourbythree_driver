#include <ros/ros.h>
#include <fourbythree_ros_controller/fourbythree_controller_manager.h>




int main(int argc, char **argv){
  ros::init(argc, argv, "fourbythree_hardware_interface_gui");
  ros::NodeHandle nh;

  
	ros::ServiceClient load_nodelet = nh.serviceClient<nodelet::NodeletLoad>("/fourbythree_nodelet/load_nodelet");
	ros::ServiceClient unload_nodelet = nh.serviceClient<nodelet::NodeletUnload>("/fourbythree_nodelet/unload_nodelet");
	ros::ServiceClient list_nodelet = nh.serviceClient<nodelet::NodeletList>("/fourbythree_nodelet/list");
	ros::ServiceClient set_zeros = nh.serviceClient<std_srvs::Trigger>("com/set_zero");
  ros::ServiceClient enable_joints = nh.serviceClient<std_srvs::Trigger>("com/enable_joints");
  ros::ServiceClient disable_joints = nh.serviceClient<std_srvs::Trigger>("com/disable_joints");
  
  ROS_INFO("%sFourByThree Starting driver node%s",BOLDGREEN,RESET);
  ROS_INFO("Waiting for FourByThree Nodelet Manager...");
  load_nodelet.waitForExistence();
  ROS_INFO("%sDONE%s",BOLDBLUE,RESET);
  
  system("rosparam load ~/.ros/motor_offset.yaml /ndlcom/motor_offset");
  bool virtual_sensor_initialization_procedure=true;
  if (nh.hasParam("/ndlcom/motor_offset"))
  {
    virtual_sensor_initialization_procedure=false;
    ROS_INFO("Using stored motor offset");
  }
  
  
  nodelet::NodeletLoad load_srv;
  nodelet::NodeletUnload unload_srv;
  nodelet::NodeletList list;
  
  
  ROS_INFO("%sUNLOADING ALL EXISTING NODELETS%s",BOLDGREEN,RESET);
  list_nodelet.call(list);
  for (unsigned int idx = 0;idx< list.response.nodelets.size();idx++)
  {
    unload_srv.request.name = list.response.nodelets.at(idx);
    unload_nodelet.call(unload_srv);
  }
  ROS_INFO("%sDONE%s",BOLDBLUE,RESET);
  

  bool load_force_monitor;
  if (!nh.getParam("load_force_monitor",load_force_monitor))
  {
    ROS_WARN("load_force_monitor flag NOT DEFINED, set true");
    load_force_monitor=true;
  }  

  if (load_force_monitor)
  {
    load_srv.request.name = "/force_monitor";
    load_srv.request.type = "itia/ForceMonitor";
    if (!load_nodelet.call(load_srv))
    {
      ROS_ERROR("Failed loading force monitor");
      return 0;
    }
    else 
    {
      ROS_INFO("%sDONE%s",BOLDBLUE,RESET);
    }
  }
  
  bool load_ndlcom;
  if (!nh.getParam("load_ndlcom",load_ndlcom))
  {
    ROS_WARN("load_ndlcom flag NOT DEFINED, set false");
    load_ndlcom=false;
  }
  if (load_ndlcom)
  {
    ROS_INFO("%sLoading NDLCOM driver%s",BOLDGREEN,RESET);
    load_srv.request.name = "/driver";
    load_srv.request.type = "ndlcom_ros/NdlcomDriverNodelet";
    if (!load_nodelet.call(load_srv))
    {
      ROS_ERROR("Failed loading NDLCOM driver, check the connection and press 'ld' to start the driver again");
      ROS_ERROR("If the problem persists, switch off and on again the robot power supply");
      return 0;
    }
    else 
    {
      ROS_INFO("%sDONE%s",BOLDBLUE,RESET);
    }
  }
  
  fourbythree::ControllerManager cm("motor");
  
  
  
  bool enable_motor;
  if (!nh.getParam("enable_motor",enable_motor))
  {
    ROS_WARN("enable_motor flag NOT DEFINED, set false");
    enable_motor=false;
  }
  if (!enable_motor)
  {
    double configuration_time;
    if (!nh.getParam("configuration_time",configuration_time))
    {
      ROS_WARN("configuration_time NOT DEFINED, set equal to 4");
      configuration_time=4;
    }
    ROS_INFO("Waiting %3.2f seconds",configuration_time);
    ros::WallDuration(configuration_time).sleep();
    
    nodelet::NodeletList list;
    list_nodelet.call(list);
    for (unsigned int idx = 0;idx< list.response.nodelets.size();idx++)
    {
      nodelet::NodeletUnload srv;
      srv.request.name = list.response.nodelets.at(idx);
      unload_nodelet.call(srv);
    }
    
    return 0;
  }
  
  if (load_ndlcom)
  {
    std_srvs::Trigger srv;
    if (!enable_joints.call(srv))
    {
      ROS_ERROR("Fail during joints enabling");
      return 0;
    }
    double configuration_time;
    if (!nh.getParam("configuration_time",configuration_time))
    {
      ROS_WARN("configuration_time NOT DEFINED, set equal to 4");
      configuration_time=4;
    }
    
    if (virtual_sensor_initialization_procedure)
    {
      if (nh.getParam("virtual_sensor_initialization_procedure",virtual_sensor_initialization_procedure))
        if (virtual_sensor_initialization_procedure)
        {
          ROS_INFO("Waiting %3.2f seconds during virtual_sensor_initialization_procedure, do not touch the robot",configuration_time);
          set_zeros.call(srv);
          ros::WallDuration(configuration_time).sleep();
          ROS_INFO("%sDONE%s",BOLDBLUE,RESET);
        }
    }
  }
  
  std::string starting_controller="motor";
  if (!nh.getParam("/starting_controller",starting_controller))
  {
    ROS_WARN("'/starting_controller' parameter is not defined, using 'motor'");
  }
  
  ROS_INFO("Switch to controller '%s'", starting_controller.c_str());
  
  controller_manager_msgs::SwitchController srv;
  srv.request.start_controllers.resize(1);
  srv.request.start_controllers.at(0)=starting_controller;
  srv.request.strictness=1;
  if (!cm.callback(srv.request,srv.response))
  {
    ROS_ERROR("Cannot switch to controller '%s'", starting_controller.c_str());
    nodelet::NodeletList list;
    list_nodelet.call(list);
    for (unsigned int idx = 0;idx< list.response.nodelets.size();idx++)
    {
      nodelet::NodeletUnload srv;
      srv.request.name = list.response.nodelets.at(idx);
      unload_nodelet.call(srv);
    }
    return 0; 
  }
  
  ros::ServiceServer controller_manager_service=nh.advertiseService("/fourbythree/controller_manager/switch_controller",&fourbythree::ControllerManager::callback,&cm);
  
  ros::AsyncSpinner as(4);
  
  as.start();
  
  
  bool print_menu=true;
  while (ros::ok())
  {
    std::string gl;
    
    if (print_menu)
    {
      printf("\n\n%sFourbythree user interface\nManage the nodelets life cycle\n%s", BOLDWHITE, RESET);
      printf("\t%s'x'%s  to exit unloading everything\n", BOLDGREEN, RESET);
      printf("\t%s's'%s  to store motor offsets\n", BOLDGREEN, RESET);
      printf("\t%sother%s  to reprint commands\n", GREEN, RESET);
      
      print_menu = false;
    }
    std::getline(std::cin, gl);
    
    if (!gl.compare("x"))
    {
      nodelet::NodeletList list;
      list_nodelet.call(list);
      for (unsigned int idx = 0;idx< list.response.nodelets.size();idx++)
      {
        nodelet::NodeletUnload srv;
        srv.request.name = list.response.nodelets.at(idx);
        unload_nodelet.call(srv);
      }
      break;
    }
    else if (!gl.compare("s"))
    {
      if (nh.hasParam("/ndlcom/motor_offset"))
      {
        ROS_INFO("Storing motor offsets");
        system("rosparam dump ~/.ros/motor_offset.yaml /ndlcom/motor_offset");
      }
      else
        ROS_WARN("/ndlcom/motor_offset is not defined");
    }
    else
      print_menu = true;
    
    
  }
  
	return 0;
}
